import { HtmlImageLayer, cancelCurrentlyRunningPlugins, isBrowser, serverSideSrc, HtmlVideoLayer } from '@cloudinary/html';
export { accessibility, lazyload, placeholder, responsive } from '@cloudinary/html';
import { defineComponent, ref, onMounted, onUpdated, onUnmounted, unref, openBlock, createElementBlock } from 'vue';

/**
 * Used in production
 */
const SDKAnalyticsConstants = {
    sdkSemver: "1.11.2",
    techVersion: "3.2.37",
    sdkCode: "L",
};

const _hoisted_1 = ["src"];
// Disabled linting due to [@vue/compiler-sfc] `defineProps` is a compiler macro and no longer needs to be imported.
// eslint-disable-next-line no-undef
/**
 * @mixin VueSDK
 * @description The Cloudinary Vue SDK contains components like \<AdvancedImage\> to easily render your media assets from Cloudinary.
 * The SDK also comes with support for optional JS plugins that make the components smart, with features like lazy loading, placeholder, accessibility & responsiveness.
 *
 * @example
 * <caption>
 *  Please note that the order of the plugins is important. See {@link https://cloudinary.com/documentation/sdks/js/frontend-frameworks/index.html#plugin-order|Plugin Order} for more details.
 * </caption>
 * // AdvancedImage
 * <template>
 *   <div>
 *     <AdvancedImage :cldImg="cldImg" :plugins="plugins" />
 *   </div>
 * </template>
 *
 * <script lang="ts">
 * import { defineComponent } from 'vue';
 * import { CloudinaryImage } from '@cloudinary/url-gen/assets/CloudinaryImage';
 * import { AdvancedImage, responsive } from '@cloudinary/vue';
 *
 * export default defineComponent({
 *   name: 'App',
 *   components: {
 *     AdvancedImage,
 * },
 *   setup(props) {
 *     const cldImg = new CloudinaryImage(
 *       'sample',
 *       { cloudName: 'demo' },
 *       { analytics: false }
 *   );
 *
 *     const plugins = [responsive({ steps: 100 })];
 *
 *     return {
 *       cldImg,
 *       plugins,
 *   };
 *  },
 * });
 * </ script>
 *
 * @example
 * <caption>
 *  Using `AdvancedVideo` custom defined resources.
 * </caption>
 *
 * // AdvancedVideo
 * <template>
 *   <AdvancedVideo :cldVid="cldVid" :sources="sources" controls width="600" />
 * </template>
 *
 * <script lang="ts">
 * import { defineComponent } from "vue";
 * import { auto } from "@cloudinary/url-gen/qualifiers/videoCodec";
 * import { videoCodec } from "@cloudinary/url-gen/actions/transcode";
 * import { AdvancedVideo } from "../dist";
 * import { CloudinaryVideo } from "@cloudinary/url-gen/assets/CloudinaryVideo";
 *
 * export default defineComponent({
 *   name: "App",
 *   components: {
 *     AdvancedVideo,
 *  },
 *   setup(props) {
 *     const cldVid = new CloudinaryVideo(
 *       "dog",
 *       { cloudName: "demo" },
 *       { analytics: false }
 *     );
 *
 *     const sources = [
 *       {
 *         type: "mp4",
 *         transcode: videoCodec(auto()),
 *       },
 *       {
 *         type: "webm",
 *         transcode: videoCodec(auto()),
 *       },
 *     ];
 *
 *     return {
 *       cldVid,
 *       sources,
 *     };
 *   },
 * });
 * </ script>
 */
/**
 * @memberOf VueSDK
 * @module AdvancedImage
 * @description The Cloudinary image component.
 * @vue-prop {CloudinaryImage} cldImg Generated by @cloudinary/url-gen
 * @vue-prop {Plugins} plugins Advanced image component plugins accessibility(), responsive(), lazyload(), placeholder()
 */
var script$1 = /*#__PURE__*/ defineComponent({
    __name: 'AdvancedImage',
    props: {
        cldImg: { type: null, required: true },
        plugins: { type: null, required: false }
    },
    setup(__props) {
        const props = __props;
        const imageRef = ref(null);
        let htmlLayerInstance;
        const getSsrSrc = () => serverSideSrc(props.plugins, props.cldImg, SDKAnalyticsConstants);
        /**
         * On mount, creates a new HTMLLayer instance and initializes with ref to img element,
         * user generated cloudinaryImage and the plugins to be used.
         */
        onMounted(() => {
            htmlLayerInstance = new HtmlImageLayer(imageRef.value, props.cldImg, props.plugins, SDKAnalyticsConstants);
        });
        /**
         * On update, we cancel running plugins and update image instance with the state of user
         * cloudinaryImage and the state of plugins.
         */
        onUpdated(() => {
            cancelCurrentlyRunningPlugins(htmlLayerInstance.htmlPluginState);
            // call html layer to update the dom again with plugins and reset toBeCanceled
            htmlLayerInstance.update(props.cldImg, props.plugins, SDKAnalyticsConstants);
        });
        /**
         * On unmount, we cancel the currently running plugins.
         */
        onUnmounted(() => {
            // Safely cancel running events on unmount.
            cancelCurrentlyRunningPlugins(htmlLayerInstance.htmlPluginState);
        });
        return (_ctx, _cache) => {
            return (unref(isBrowser)())
                ? (openBlock(), createElementBlock("img", {
                    key: 0,
                    ref_key: "imageRef",
                    ref: imageRef
                }, null, 512 /* NEED_PATCH */))
                : (openBlock(), createElementBlock("img", {
                    key: 1,
                    src: getSsrSrc()
                }, null, 8 /* PROPS */, _hoisted_1));
        };
    }
});

script$1.__file = "src/components/AdvancedImage.vue";

// Disabled linting due to [@vue/compiler-sfc] `defineProps` is a compiler macro and no longer needs to be imported.
// eslint-disable-next-line no-undef
/**
 * @memberOf VueSDK
 * @module AdvancedVideo
 * @description The Cloudinary video component.
 *
 * @vue-prop {CloudinaryVideo} cldVid Generated by @cloudinary/url-gen
 * @vue-prop {VideoPoster} cldPoster Generated by @cloudinary/url-gen
 * @vue-prop {Plugins} plugins Advanced video component plugins accessibility(), responsive(), lazyload(), placeholder()
 * @vue-prop {VideoSources} sources Optional sources to generate
 */
var script = /*#__PURE__*/ defineComponent({
    __name: 'AdvancedVideo',
    props: {
        cldVid: { type: null, required: true },
        plugins: { type: null, required: false },
        sources: { type: null, required: false },
        cldPoster: { type: null, required: false }
    },
    setup(__props) {
        const props = __props;
        const videoRef = ref(null);
        let htmlLayerInstance;
        /**
         * On mount, creates a new HTMLLayer instance and initializes with ref to img element,
         * user generated cloudinaryVideo and the plugins to be used.
         */
        onMounted(() => {
            htmlLayerInstance = new HtmlVideoLayer(videoRef.value, props.cldVid, props.sources, props.plugins, undefined, props.cldPoster);
        });
        /**
         * On update, we cancel running plugins and update image instance with the state of user
         * cloudinaryVideo and the state of plugins.
         */
        onUpdated(() => {
            cancelCurrentlyRunningPlugins(htmlLayerInstance.htmlPluginState);
            // call html layer to update the dom again with plugins and reset toBeCanceled
            htmlLayerInstance.update(props.cldVid, props.sources, props.plugins, undefined, props.cldPoster);
        });
        /**
         * On unmount, we cancel the currently running plugins.
         */
        onUnmounted(() => {
            // Safely cancel running events on unmount.
            cancelCurrentlyRunningPlugins(htmlLayerInstance.htmlPluginState);
        });
        return (_ctx, _cache) => {
            return (openBlock(), createElementBlock("video", {
                ref_key: "videoRef",
                ref: videoRef
            }, null, 512 /* NEED_PATCH */));
        };
    }
});

script.__file = "src/components/AdvancedVideo.vue";

export { script$1 as AdvancedImage, script as AdvancedVideo };
